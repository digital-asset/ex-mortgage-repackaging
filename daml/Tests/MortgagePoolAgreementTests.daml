
{-# LANGUAGE PartialTypeSignatures #-}

module Tests.MortgagePoolAgreementTests where

import Main.MortgagePoolAgreement

import DA.Assert
import DA.List
import Daml.Script
import Tests.Factories

-- test:
readyAgreementForIssuanceFailsIfCusipsDontMatch =
  do
    parties@Parties{..} <- allocateParties
    poolAgreementResult <- buildMortgagePoolAgreement parties
    firstUnrelatedPool <- buildPoolDef123 parties
    secondUnrelatedPool <- buildPoolDef456 parties
    operator `submitMustFail` do
      exerciseCmd poolAgreementResult.mortgagePoolAgreement ReadyAgreementForIssuance with
          underlyingPools=[firstUnrelatedPool, secondUnrelatedPool]

-- test:
readyAgreementForIssuanceFailsIfAlreadyReadyForIssuance =
  do
    parties@Parties{..} <- allocateParties
    poolAgreementResult <- buildMortgagePoolAgreement parties
    let firstPool = poolAgreementResult.underlyingPools!!0
    let secondPool = poolAgreementResult.underlyingPools!!1

    poolAgreement <- operator `submit` do
                        exerciseCmd poolAgreementResult.mortgagePoolAgreement ReadyAgreementForIssuance with
                            underlyingPools=[firstPool, secondPool]

    operator `submitMustFail` do
      exerciseCmd poolAgreement ReadyAgreementForIssuance with underlyingPools=[firstPool, secondPool]

-- test:
readyAgreementForIssuanceArchivesAllUnderlyingPools =
  do
    parties@Parties{..} <- allocateParties
    poolAgreementResult <- buildMortgagePoolAgreement parties
    let firstPool = poolAgreementResult.underlyingPools!!0
    let secondPool = poolAgreementResult.underlyingPools!!1

    operator `submit` do
      exerciseCmd poolAgreementResult.mortgagePoolAgreement ReadyAgreementForIssuance with
          underlyingPools=[firstPool, secondPool]

    optFirstPool <- queryContractId securitizer firstPool
    optFirstPool === None

    optSecondPool <- queryContractId securitizer secondPool
    optSecondPool === None
