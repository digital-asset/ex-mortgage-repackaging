
{-# LANGUAGE PartialTypeSignatures #-}

module Tests.MortgagePoolAgreementDraftTests where

import Main.MortgagePool
import Main.MortgagePoolAgreementDraft

import DA.List
import DA.Date
import Daml.Script

import Tests.Factories

--MortgagePoolAgreementDraft Tests
-- test:
addPoolToUnderlyingAllosUsToAddMultiplePools =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft
    Some latestProposal <- queryContractId mortgagePoolHolder mortgagePoolAgreementDraft

    assert(length latestProposal.underlyingPools == 2)
    let firstPool = latestProposal.underlyingPools!!0
    assert(firstPool.cusip == abc456)
    let secondPool = latestProposal.underlyingPools!!1
    assert(secondPool.cusip == abc123)

-- test:
addPoolToUnderlyingFailsWhenALockedPoolIsUsed =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft

    poolDef123 <- buildPoolDef123 parties
    lockedPool <- mortgagePoolHolder `submit` do exerciseCmd poolDef123 LockMortgagePool

    mortgagePoolHolder `submitMustFail` do
      exerciseCmd mortgagePoolAgreementDraft AllocateCollateral with mortgagePool=lockedPool

-- test:
addPoolToUnderlyingFailsWhenAnAlreadyLinkedPoolIsAdded =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft

    poolDef123 <- buildPoolDef123 parties
    draftAgreementUpdateResult <-
      mortgagePoolHolder `submit` do exerciseCmd mortgagePoolAgreementDraft AllocateCollateral with mortgagePool=poolDef123

    mortgagePoolHolder `submitMustFail` do
      exerciseCmd draftAgreementUpdateResult.mortgagePoolAgreementDraft AllocateCollateral with mortgagePool=draftAgreementUpdateResult.mortgagePool

-- test:
addPoolToUnderlyingProperlyAdjustsTheDraftFields =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft
    Some proposalDraftWithTwoPools <- queryContractId mortgagePoolHolder mortgagePoolAgreementDraft
    assert(proposalDraftWithTwoPools.agreementDraftFields.faceValue == 250.0)
    case proposalDraftWithTwoPools.agreementDraftFields.lastLoanMaturity of
      None -> abort "Failure. lastLoanMaturity should exist"
      Some lastLoanMaturity -> assert(lastLoanMaturity == datetime 1982 Jan 1 0 0 0)

-- test:
removePoolFromUnderlyingWorksWhenRemovingOneOfTwoPools =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft
    poolAbc123 <- buildPoolAbc123 parties
    latestDraftUpdateResult <- mortgagePoolHolder `submit` do
      exerciseCmd mortgagePoolAgreementDraft DeallocateCollateral with mortgagePool=poolAbc123

    Some singlePoolProposal <- queryContractId mortgagePoolHolder latestDraftUpdateResult.mortgagePoolAgreementDraft
    --remove one of two
    assert(length singlePoolProposal.underlyingPools == 1)
    let pool = singlePoolProposal.underlyingPools!!0
    assert(pool.cusip == abc456)

-- test:
removePoolFromUnderlyingWorksWhenRemovingMiddleOfFour =
  do  parties@Parties{..} <- allocateParties
      agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
      let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft
      poolDef123 <- buildPoolDef123 parties
      poolDef456 <- buildPoolDef456 parties
      draftUpdateResult <- mortgagePoolHolder `submit` do exerciseCmd mortgagePoolAgreementDraft AllocateCollateral with mortgagePool=poolDef123

      secondDraftUpdateResult <- mortgagePoolHolder `submit` do

        exerciseCmd draftUpdateResult.mortgagePoolAgreementDraft AllocateCollateral with mortgagePool=poolDef456

      Some draftWithFourPools <- queryContractId mortgagePoolHolder secondDraftUpdateResult.mortgagePoolAgreementDraft

      assert(length draftWithFourPools.underlyingPools == 4)

      let proposalWithFourPoolsCid = secondDraftUpdateResult.mortgagePoolAgreementDraft

      draftUpdateResult <- mortgagePoolHolder `submit` do
        exerciseCmd proposalWithFourPoolsCid DeallocateCollateral with mortgagePool=draftUpdateResult.mortgagePool

      Some proposalWithFourthPoolRemoved <- queryContractId mortgagePoolHolder draftUpdateResult.mortgagePoolAgreementDraft

      assert(length proposalWithFourthPoolRemoved.underlyingPools == 3)
      let firstPool = proposalWithFourthPoolRemoved.underlyingPools!!0
      assert(firstPool.cusip == def456)
      let secondPool = proposalWithFourthPoolRemoved.underlyingPools!!1
      assert(secondPool.cusip == abc456)
      let thirdPool = proposalWithFourthPoolRemoved.underlyingPools!!2
      assert(thirdPool.cusip == abc123)

-- test:
removePoolFromUnderlyingFailsWhenGivenPoolIsntUnderlying =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft
    poolDef123 <- buildPoolDef123 parties
    mortgagePoolHolder `submitMustFail` do
      exerciseCmd mortgagePoolAgreementDraft DeallocateCollateral with mortgagePool=poolDef123

-- test:
removePoolFromUnderlyingAdjustsTheDraftFieldsCorrectly =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft

    poolAbc123 <- buildPoolAbc123 parties
    draftUpdateResult <- mortgagePoolHolder `submit` do
      exerciseCmd mortgagePoolAgreementDraft DeallocateCollateral with mortgagePool=poolAbc123

    Some proposalDraftWithOnePool <- queryContractId mortgagePoolHolder draftUpdateResult.mortgagePoolAgreementDraft
    assert(proposalDraftWithOnePool.agreementDraftFields.faceValue == 100.0)
    case proposalDraftWithOnePool.agreementDraftFields.lastLoanMaturity of
      None -> abort "Failure. lastLoanMaturity should exist"
      Some lastLoanMaturity -> assert(lastLoanMaturity == datetime 1980 Jan 1 0 0 0)

-- test:
submitProposalDisclosesUnderlyingPoolsToTheSecuritizer =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft
    let firstUnderlyingPoolCid = agreementDraftSetup.underlyingPools!!0
    let secondUnderlyingPoolCid = agreementDraftSetup.underlyingPools!!1

    draftProposalResult <- mortgagePoolHolder `submit` do
      exerciseCmd mortgagePoolAgreementDraft SubmitProposal with
        securitizer; underlyingPoolCids=[firstUnderlyingPoolCid, secondUnderlyingPoolCid]

    Some _ <- queryContractId securitizer (draftProposalResult.underlyingPoolCids!!0)
    Some _ <- queryContractId securitizer (draftProposalResult.underlyingPoolCids!!1)
    pure ()