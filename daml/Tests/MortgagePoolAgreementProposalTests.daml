
{-# LANGUAGE PartialTypeSignatures #-}

daml 1.2
module Tests.MortgagePoolAgreementProposalTests where

import Main.MortgagePoolAgreementDraft
import Main.MortgagePoolAgreementProposal

import Tests.Factories

import DA.List
import Daml.Script

-- test:
withdrawingAProposalUnlocksTheUnderlyingPools =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft
    let firstUnderlyingPoolCid = agreementDraftSetup.underlyingPools!!0
    let secondUnderlyingPoolCid = agreementDraftSetup.underlyingPools!!1
    draftProposalResult <- mortgagePoolHolder `submit` do exerciseCmd mortgagePoolAgreementDraft SubmitProposal with securitizer; underlyingPoolCids=[firstUnderlyingPoolCid, secondUnderlyingPoolCid]

    let firstUnderlyingPoolCid = draftProposalResult.underlyingPoolCids!!0
    let secondUnderlyingPoolCid = draftProposalResult.underlyingPoolCids!!1
    Some firstUnderlyingPool <- queryContractId mortgagePoolHolder firstUnderlyingPoolCid
    Some secondUnderlyingPool <- queryContractId mortgagePoolHolder secondUnderlyingPoolCid
    assert(firstUnderlyingPool.isLocked)
    assert(secondUnderlyingPool.isLocked)

    withdrawnProposalResult <- mortgagePoolHolder `submit` do exerciseCmd draftProposalResult.mortgagePoolAgreementProposal Withdraw with underlyingPoolCids=[firstUnderlyingPoolCid, secondUnderlyingPoolCid]

    Some firstUnderlyingPool <- queryContractId mortgagePoolHolder (withdrawnProposalResult!!0)
    Some secondUnderlyingPool <- queryContractId mortgagePoolHolder (withdrawnProposalResult!!1)

    assertMsg "first pool should not be locked" (not firstUnderlyingPool.isLocked)
    assertMsg "second pool should not be locked" (not secondUnderlyingPool.isLocked)

-- test:
rejectingAProposalUnlocksTheUnderlyingPools =
  do
    parties@Parties{..} <- allocateParties
    agreementDraftSetup <- buildMortgagePoolAgreementDraft parties
    let mortgagePoolAgreementDraft = agreementDraftSetup.mortgagePoolAgreementDraft
    let firstUnderlyingPoolCid = agreementDraftSetup.underlyingPools!!0
    let secondUnderlyingPoolCid = agreementDraftSetup.underlyingPools!!1
    draftProposalResult <- mortgagePoolHolder `submit` do exerciseCmd mortgagePoolAgreementDraft SubmitProposal with securitizer; underlyingPoolCids=[firstUnderlyingPoolCid, secondUnderlyingPoolCid]

    let firstUnderlyingPoolCid = draftProposalResult.underlyingPoolCids!!0
    let secondUnderlyingPoolCid = draftProposalResult.underlyingPoolCids!!1

    Some firstUnderlyingPool <- queryContractId mortgagePoolHolder firstUnderlyingPoolCid
    Some secondUnderlyingPool <- queryContractId mortgagePoolHolder secondUnderlyingPoolCid
    assert (firstUnderlyingPool.isLocked)
    assert (secondUnderlyingPool.isLocked)

    withdrawnProposalResult <- securitizer `submit` do exerciseCmd draftProposalResult.mortgagePoolAgreementProposal Reject with underlyingPoolCids=[firstUnderlyingPoolCid, secondUnderlyingPoolCid]

    Some firstUnderlyingPool <- queryContractId mortgagePoolHolder (withdrawnProposalResult!!0)
    Some secondUnderlyingPool <- queryContractId mortgagePoolHolder (withdrawnProposalResult!!1)
    assertMsg "first pool should not be locked" (not firstUnderlyingPool.isLocked)
    assertMsg "second pool should not be locked" (not secondUnderlyingPool.isLocked)
