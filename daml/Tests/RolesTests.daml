
{-# LANGUAGE PartialTypeSignatures #-}

daml 1.2
module Tests.RolesTests where

import Main.MortgagePoolAgreementDraft
import Main.MortgagePoolAgreementProposal

import Main.CustomTypes
import Main.AvailableCusip
import Main.Roles

import DA.List
import Daml.Script

import Tests.Factories

-- test:
operatorCanSettleAMortgageAgreement =
  do
    parties@Parties{..} <- allocateParties
    operatorRights <- operator `submit` do createCmd OperatorRights with operator

    mortgagePoolHolderRights <- operator `submit` do exerciseCmd operatorRights OnboardMortgagePoolHolder with mortgagePoolHolder

    registryRights <- operator `submit` do exerciseCmd operatorRights OnboardRegistry with registry

    securitizerRights <- operator `submit` do exerciseCmd operatorRights OnboardSecuritizer with securitizer

    availableCusipRequest <- securitizer `submit` do exerciseCmd securitizerRights RequestCUSIPs with registry; numberRequested=4

    availableCusips <- registry `submit` do exerciseCmd availableCusipRequest Fulfill with cusips=[abc123, abc456, def123, def456]

    let availableCusip = availableCusips!!0

    agreementProposal <- mortgagePoolHolder `submit` do exerciseCmd mortgagePoolHolderRights CreateMortgagePoolAgreementDraft with agreementDraftFields=buildAgreementDraftFields

    poolAbc123 <- registry `submit` do exerciseCmd registryRights IssueMortgagePool with owner=mortgagePoolHolder; mortgagePoolFields=poolAbc123Fields; underlyingCusips=[CUSIP{text="zzz123"}]

    firstDraftUpdateResult <- mortgagePoolHolder `submit` do exerciseCmd agreementProposal AllocateCollateral with mortgagePool=poolAbc123

    poolAbc456 <- registry `submit` do exerciseCmd registryRights IssueMortgagePool with owner=mortgagePoolHolder; mortgagePoolFields=poolAbc456Fields; underlyingCusips=[CUSIP{text="zzz123"}]

    finalDraftUpdateResult <- mortgagePoolHolder `submit` do exerciseCmd firstDraftUpdateResult.mortgagePoolAgreementDraft AllocateCollateral with mortgagePool=poolAbc456

    draftProposalResult <- mortgagePoolHolder `submit` do exerciseCmd finalDraftUpdateResult.mortgagePoolAgreementDraft SubmitProposal with securitizer; underlyingPoolCids=[firstDraftUpdateResult.mortgagePool, finalDraftUpdateResult.mortgagePool]

    mortgageAgreement <- securitizer `submit` do exerciseCmd draftProposalResult.mortgagePoolAgreementProposal Accept with availableCusipCid=availableCusip; registry

    delegatedRegistrationRightsCid <- registry `submit` do exerciseCmd registryRights DelegateRegistrationRights

    delegatedSecuritizerRightsCid <- securitizer `submit` do exerciseCmd securitizerRights DelegateSecuritizerRights

    let latestFirstUnderlyingPoolCid = draftProposalResult.underlyingPoolCids!!0
    let latestSecondUnderlyingPoolCid = draftProposalResult.underlyingPoolCids!!1

    operator `submit` do
      exerciseCmd operatorRights SettleMortgagePoolAgreement
        with
          mortgagePoolAgreementCid=mortgageAgreement
          underlyingMortgagePoolCids=[latestFirstUnderlyingPoolCid, latestSecondUnderlyingPoolCid]
          delegatedRegistrationRightsCid
          delegatedSecuritizerRightsCid
