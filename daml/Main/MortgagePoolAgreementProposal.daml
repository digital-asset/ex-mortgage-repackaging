
{-# LANGUAGE PartialTypeSignatures #-}

module Main.MortgagePoolAgreementProposal where

import Main.CustomTypes
import Main.AvailableCusip
import Main.MortgagePool
import Main.MortgagePoolAgreement

unlockPools : [(ContractId MortgagePool)] -> [CUSIP] -> Update [ContractId MortgagePool]
unlockPools underlyingPoolCids underlyingCusips =
  do
    givenCusips <- poolCidsToCusips(underlyingPoolCids)
    assert(cusipsMatch(givenCusips)(underlyingCusips))
    mapA
      (\
        (pool: ContractId MortgagePool) ->
          do exercise pool UnlockMortgagePool
      )
      underlyingPoolCids

template MortgagePoolAgreementProposal
  with
    mortgagePoolHolder: Party
    securitizer: Party
    operator: Party
    agreementFields: MortgagePoolAgreementFields
    underlyingCusips: [CUSIP]
  where
    signatory mortgagePoolHolder

    observer operator

    controller securitizer can
      Accept : ContractId MortgagePoolAgreement
        with availableCusipCid: ContractId AvailableCUSIP; registry: Party
        do
          availableCusip <- fetch availableCusipCid
          do exercise availableCusipCid AvailableCUSIP_Archives
          create MortgagePoolAgreement with mortgagePoolHolder; securitizer; operator; registry; cusip=availableCusip.cusip; agreementFields; underlyingCusips; isReadyForIssuance=False

      Reject : [(ContractId MortgagePool)]
        with underlyingPoolCids: [(ContractId MortgagePool)]
        do
          unlockPools(underlyingPoolCids)(underlyingCusips)

    controller mortgagePoolHolder can
      Withdraw : [(ContractId MortgagePool)]
        with underlyingPoolCids: [(ContractId MortgagePool)]
        do
          unlockPools(underlyingPoolCids)(underlyingCusips)
